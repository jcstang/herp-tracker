{"version":3,"sources":["../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/java.js","../node_modules/refractor/lang/javadoc.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases","java","keywords","className","extend","function","clike","number","operator","greedy","annotation","namespace","source","replace","generics","refractorJava","require","refractorJavadoclike","javadoc","register","codeLinePattern","memberReference","reference","field","code","line","tag","markup","entity"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_javadoc.23fc1457.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|null|open|opens|package|private|protected|provides|public|record|requires|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // based on the java naming conventions\n    var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className, // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        alias: 'punctuation',\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:\\s*(?:\\*\\s*)*)).*[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference = /(?:[a-zA-Z]\\w+\\s*\\.\\s*)*[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n      /<mem>/g,\n      function () {\n        return memberReference\n      }\n    )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern: /(\\{@code\\s+)(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+?(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern: /(<(code|pre|tt)>(?!<code>)\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n"],"sourceRoot":""}