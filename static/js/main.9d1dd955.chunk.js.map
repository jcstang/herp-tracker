{"version":3,"sources":["components/navbar.module.css","components/Card/index.js","components/Loading.js","components/MainPage/index.js","components/login-button.js","components/logout-button.js","components/nav-bar.js","components/highlight.js","views/home.js","views/Profile.js","App.js","serviceWorker.js","auth0-provider-with-history.js","index.js"],"names":["module","exports","Card","props","className","href","petName","Loading","src","alt","MainPage","children","LoginButton","loginWithRedirect","useAuth0","Button","onClick","varient","LogoutButton","logout","returnTo","window","location","origin","variant","MainNav","Nav","Link","as","RouterNavLink","to","exact","activeClassName","AuthNav","isAuthenticated","AppNavBar","Navbar","bg","expand","styles","topnav","Container","fluid","Brand","width","height","bigblue","SyntaxHighlighter","registerLanguage","json","Highlight","language","style","atomDark","Home","useState","name","petList","setPetList","plusBtnClicked","event","preventDefault","console","log","newList","push","map","pet","index","key","Fab","color","aria-label","Profile","user","picture","email","Row","Col","md","JSON","stringify","App","isLoading","path","component","Boolean","hostname","match","Auth0ProviderWithHistory","history","useHistory","domain","process","clientId","redirectUri","onRedirectCallback","appState","pathname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,yB,yOCqB9CC,MAlBf,SAAcC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeC,KAAK,KAAI,uBAAGD,UAAU,iBAClD,wBAAIA,UAAU,cAAcD,EAAMG,SAClC,uBAAGF,UAAU,aAAb,kGAIA,uBAAGC,KAAK,IAAID,UAAU,mBAAtB,8BCDOG,EARC,WACd,OACE,6BACE,yBAAKC,IALT,mEAK4BC,IAAI,cCEnBC,EARE,SAACP,GAChB,OACE,yBAAKC,UAAU,uBACZD,EAAMQ,W,4CCaEC,EAdK,WAAO,IACjBC,EAAsBC,cAAtBD,kBAER,OACE,kBAACE,EAAA,EAAD,CACEC,QAAS,kBAAMH,KACfI,QAAQ,UACRb,UAAU,cAHZ,WCUWc,EAdM,WAAO,IAClBC,EAAWL,cAAXK,OAER,OACE,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAAMG,EAAO,CAAEC,SAAUC,OAAOC,SAASC,UAClDC,QAAQ,SACRpB,UAAU,cAHZ,YCGEqB,EAAU,WACd,OACE,kBAACC,EAAA,EAAD,CAAKtB,UAAU,WACb,kBAACsB,EAAA,EAAIC,KAAL,CACEC,GAAIC,IACJC,GAAG,IACHC,OAAK,EACLC,gBAAgB,4BAJlB,QAQA,kBAACN,EAAA,EAAIC,KAAL,CACEC,GAAIC,IACJC,GAAG,WACHC,OAAK,EACLC,gBAAgB,4BAJlB,aAYAC,EAAU,WAAO,IACbC,EAAoBpB,cAApBoB,gBAER,OACE,kBAACR,EAAA,EAAD,CAAKtB,UAAU,uBACZ8B,EAAkB,kBAAC,EAAD,MAAmB,kBAAC,EAAD,QA+B7BC,EA1BG,WAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKlC,UAAWmC,IAAOC,QAC/C,kBAACC,EAAA,EAAD,CACErC,UAAW,+BAAiCmC,IAAOC,OACnDE,OAAK,GAEL,kBAACN,EAAA,EAAOO,MAAR,CAAcf,GAAIC,IAAezB,UAAU,OAAO0B,GAAG,KACnD,yBACEtB,IAAI,yBACJoC,MAAM,MACNC,OAAO,MACPzC,UAAU,2BACVK,IAAI,0BAGR,wBAAIL,UAAWmC,IAAOO,SAAtB,gBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,yBCzDRC,IAAkBC,iBAAiB,OAAQC,KAE3C,IAMeC,EANG,SAAC,GAAD,IAAGvC,EAAH,EAAGA,SAAH,OAChB,kBAAC,IAAD,CAAmBwC,SAAS,OAAOC,MAAOC,KACvC1C,I,0CCgDU2C,EAnDF,SAACnD,GAAW,IAAD,EACQoD,mBAAS,CACrC,CACEC,KAAM,SAER,CACEA,KAAM,OAER,CACEA,KAAM,SAER,CACEA,KAAM,UAER,CACEA,KAAM,aAfY,mBACfC,EADe,KACNC,EADM,KAmBhBC,EAAiB,SAACC,GACtBA,EAAMC,iBACNC,QAAQC,IAAI,uBACZ,IAAMC,EAAO,YAAOP,GACpBO,EAAQC,KAAK,CAAET,KAAM,SACrBE,EAAWM,IAGb,OACE,oCACE,kBAACvB,EAAA,EAAD,CAAWrC,UAAU,gBAAgBsC,OAAK,GACxC,yBAAKtC,UAAU,QACb,0CACA,uBAAGC,KAAK,IAAID,UAAU,MAAMY,QAAS2C,GACnC,uBAAGvD,UAAU,wBAGhBqD,EAAQS,KAAI,SAACC,EAAKC,GAAN,OACX,kBAAC,EAAD,CAAM9D,QAAS6D,EAAIX,KAAMa,IAAKD,OAGhC,kBAACE,EAAA,EAAD,CAAKC,MAAM,YAAYC,aAAW,MAAMxD,QAAS2C,GAC/C,kBAAC,IAAD,OAEF,kBAAC5C,EAAA,EAAD,CAAQX,UAAU,kBAAkBoB,QAAQ,WAC1C,kBAAC,IAAD,U,kBClBKiD,EA1BC,WAAO,IACbC,EAAS5D,cAAT4D,KACAlB,EAAyBkB,EAAzBlB,KAAMmB,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,MAEvB,OACE,kBAACnC,EAAA,EAAD,CAAWrC,UAAU,QACnB,kBAACyE,EAAA,EAAD,CAAKzE,UAAU,mEACb,kBAAC0E,EAAA,EAAD,CAAKC,GAAI,GACP,yBACEvE,IAAKmE,EACLlE,IAAI,UACJL,UAAU,2DAGd,kBAAC0E,EAAA,EAAD,CAAKC,IAAE,GACL,4BAAKvB,GACL,uBAAGpD,UAAU,mBAAmBwE,KAGpC,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,KAAYG,KAAKC,UAAUP,EAAM,KAAM,OCMhCQ,MAvBf,WAIE,OAHsBpE,cAAdqE,UAIC,kBAAC,EAAD,MAIP,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC1C,EAAA,EAAD,CAAWrC,UAAU,IACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgF,KAAK,IAAIrD,OAAK,EAACsD,UAAW/B,IACjC,kBAAC,IAAD,CAAO8B,KAAK,WAAWrD,OAAK,EAACsD,UAAWZ,SCZhCa,QACW,cAA7BjE,OAAOC,SAASiE,UAEe,UAA7BlE,OAAOC,SAASiE,UAEhBlE,OAAOC,SAASiE,SAASC,MACvB,2DCdN,IAsBeC,EAtBkB,SAAC,GAAkB,IAAhB9E,EAAe,EAAfA,SAI5B+E,EAAUC,cAMhB,OACE,kBAAC,IAAD,CACEC,OAXWC,yBAYXC,SAXaD,mCAYbE,YAAa1E,OAAOC,SAASC,OAC7ByE,mBATuB,SAACC,GAC1BP,EAAQzB,MAAa,OAARgC,QAAQ,IAARA,OAAA,EAAAA,EAAU7E,WAAYC,OAAOC,SAAS4E,YAUhDvF,ICbPwF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9d1dd955.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigblue\":\"navbar_bigblue__1MGOu\",\"topnav\":\"navbar_topnav__2Z-zD\"};","import React from 'react';\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nfunction Card(props) {\n  return (\n    <div className='card col-sm-12'>\n      <div className='card-body'>\n        <a className=\"edit-btn btn\" href=\"/\"><i className=\"fas fa-edit\"></i></a>\n        <h5 className='card-title'>{props.petName}</h5>\n        <p className='card-text'>\n          Some quick example text to build on the card title and make up the\n          bulk of the card's content.\n        </p>\n        <a href='/' className='btn btn-primary'>\n          click - modal pop-up???\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\n\nconst loadingImage =\n  'https://cdn.auth0.com/blog/auth0-react-sample/assets/loading.svg';\n\nconst Loading = () => {\n  return (\n    <div>\n      <img src={loadingImage} alt='Loading' />\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from 'react';\n\nconst MainPage = (props) => {\n  return (\n    <div className='App container-fluid'>\n      {props.children}\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Button } from 'react-bootstrap';\n\nconst LoginButton = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return (\n    <Button\n      onClick={() => loginWithRedirect()}\n      varient='primary'\n      className='btn-margin'\n    >\n      Log In\n    </Button>\n  );\n};\n\nexport default LoginButton;\n","import React from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Button } from 'react-bootstrap';\n\nconst LogoutButton = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <Button\n      onClick={() => logout({ returnTo: window.location.origin })}\n      variant='danger'\n      className='btn-margin'\n    >\n      Log Out\n    </Button>\n  );\n};\n\nexport default LogoutButton;\n","import React from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport { Container, Nav, Navbar } from 'react-bootstrap';\nimport styles from './navbar.module.css';\n\nimport { useAuth0 } from '@auth0/auth0-react';\nimport LoginButton from './login-button';\nimport LogoutButton from './logout-button';\n// TODO:  logout button\n// TODO:  login button\n\nconst MainNav = () => {\n  return (\n    <Nav className='mr-auto'>\n      <Nav.Link\n        as={RouterNavLink}\n        to='/'\n        exact\n        activeClassName='router-link-exact-active'\n      >\n        Home\n      </Nav.Link>\n      <Nav.Link\n        as={RouterNavLink}\n        to='/profile'\n        exact\n        activeClassName='router-link-exact-active'\n      >\n        Profile\n      </Nav.Link>\n    </Nav>\n  );\n};\n\nconst AuthNav = () => {\n  const { isAuthenticated } = useAuth0();\n\n  return (\n    <Nav className='justify-content-end'>\n      {isAuthenticated ? <LogoutButton /> : <LoginButton />}\n    </Nav>\n  );\n};\n\nconst AppNavBar = () => {\n  return (\n    <Navbar bg='light' expand='md' className={styles.topnav}>\n      <Container\n        className={'d-flex justify-content-start' + styles.topnav}\n        fluid\n      >\n        <Navbar.Brand as={RouterNavLink} className='logo' to='/'>\n          <img\n            src='./placeholder-logo.svg'\n            width='100'\n            height='100'\n            className='d-inline-block align-top'\n            alt='React Bootstrap logo'\n          />\n        </Navbar.Brand>\n        <h1 className={styles.bigblue}>Herp-Tracker</h1>\n        <MainNav />\n        <AuthNav />\n        {/* <LoginButton />\n        <LogoutButton /> */}\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default AppNavBar;\n","import React from 'react';\nimport { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport json from 'react-syntax-highlighter/dist/esm/languages/prism/json';\nimport atomDark from 'react-syntax-highlighter/dist/esm/styles/prism/atom-dark';\n\nSyntaxHighlighter.registerLanguage('json', json);\n\nconst Highlight = ({ children }) => (\n  <SyntaxHighlighter language='json' style={atomDark}>\n    {children}\n  </SyntaxHighlighter>\n);\n\nexport default Highlight;\n","import React, { useState } from 'react';\nimport { Container, Button } from 'react-bootstrap';\nimport { Card } from '../components';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst Home = (props) => {\n  const [petList, setPetList] = useState([\n    {\n      name: 'Zelda',\n    },\n    {\n      name: 'Ted',\n    },\n    {\n      name: 'Gimli',\n    },\n    {\n      name: 'Dharma',\n    },\n    {\n      name: 'Bun-Bun',\n    },\n  ]);\n\n  const plusBtnClicked = (event) => {\n    event.preventDefault();\n    console.log('plus button clicked');\n    const newList = [...petList];\n    newList.push({ name: 'Snek' });\n    setPetList(newList);\n  };\n\n  return (\n    <>\n      <Container className='pet-container' fluid>\n        <div className='card'>\n          <p>Add new pet</p>\n          <a href='/' className='btn' onClick={plusBtnClicked}>\n            <i className='fas fa-plus fa-4x'></i>\n          </a>\n        </div>\n        {petList.map((pet, index) => (\n          <Card petName={pet.name} key={index} />\n        ))}\n\n        <Fab color='secondary' aria-label='add' onClick={plusBtnClicked}>\n          <AddIcon />\n        </Fab>\n        <Button className='my-float-button' variant='warning'>\n          <AddIcon />\n        </Button>\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { Highlight } from '../components';\n\nimport { useAuth0 } from '@auth0/auth0-react';\n\nconst Profile = () => {\n  const { user } = useAuth0();\n  const { name, picture, email } = user;\n\n  return (\n    <Container className='mb-5'>\n      <Row className='align-items-center profile-header mb-5 text-center text-md-left'>\n        <Col md={2}>\n          <img\n            src={picture}\n            alt='Profile'\n            className='rounded-circle img-fluid profile-picture mb-3 mb-md-0'\n          />\n        </Col>\n        <Col md>\n          <h2>{name}</h2>\n          <p className='lead text-muted'>{email}</p>\n        </Col>\n      </Row>\n      <Row>\n        <Highlight>{JSON.stringify(user, null, 2)}</Highlight>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport './App.css';\nimport { Loading, MainPage, AppNavBar } from './components';\n\nimport { Home, Profile } from './views';\n\nfunction App() {\n  const { isLoading } = useAuth0();\n\n  // Loading image if busy\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      <AppNavBar />\n      <MainPage>\n        <Container className=''>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/profile' exact component={Profile} />\n          </Switch>\n        </Container>\n      </MainPage>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Auth0Provider } from '@auth0/auth0-react';\n\nconst Auth0ProviderWithHistory = ({ children }) => {\n  const domain = process.env.REACT_APP_AUTH0_DOMAIN;\n  const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\n\n  const history = useHistory();\n\n  const onRedirectCallback = (appState) => {\n    history.push(appState?.returnTo || window.location.pathname);\n  };\n\n  return (\n    <Auth0Provider\n      domain={domain}\n      clientId={clientId}\n      redirectUri={window.location.origin}\n      onRedirectCallback={onRedirectCallback}\n    >\n      {children}\n    </Auth0Provider>\n  );\n};\n\nexport default Auth0ProviderWithHistory;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Auth0ProviderWithHistory from './auth0-provider-with-history';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Auth0ProviderWithHistory>\n        <App />\n      </Auth0ProviderWithHistory>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}